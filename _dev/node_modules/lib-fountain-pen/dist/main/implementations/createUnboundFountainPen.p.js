"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const ps = __importStar(require("pareto-core-state"));
const $$ = ($x, $d) => {
    return ($, $c, $i) => {
        const config = $;
        let isFirstLine = true;
        function createSubBlock(currentIndentation, flush, $c) {
            function line($$c) {
                let currentLine = ps.createArrayBuilder();
                currentLine.push(currentIndentation);
                flush({});
                if (isFirstLine) {
                }
                else {
                    $i($x.newline);
                }
                isFirstLine = false;
                $$c({
                    'indent': ($c) => {
                        createSubBlock($d.joinNestedStrings({
                            strings: [currentIndentation, $x.indentation],
                            separator: ""
                        }), () => {
                            if (currentLine !== null) {
                                $i($d.getArrayAsString(currentLine.getArray()));
                                currentLine = null;
                            }
                        }, $c);
                    },
                    'snippet': ($2) => {
                        if (currentLine !== null) {
                            currentLine.push($2);
                        }
                        else {
                            $i($x.newline);
                            currentLine = ps.createArrayBuilder();
                            currentLine.push(currentIndentation);
                            currentLine.push($2);
                        }
                    },
                });
                if (currentLine !== null) {
                    $i($d.getArrayAsString(currentLine.getArray()));
                }
            }
            $c({
                'line': ($) => {
                    line(($i) => {
                        $i.snippet($);
                    });
                },
                'nestedLine': ($$c) => {
                    line($$c);
                },
            });
        }
        createSubBlock(``, ($) => {
            //no flushing
        }, $c);
    };
};
exports.$$ = $$;
