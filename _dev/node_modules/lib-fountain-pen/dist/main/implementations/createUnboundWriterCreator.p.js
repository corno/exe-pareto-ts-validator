"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const ps = __importStar(require("pareto-core-state"));
const pr = __importStar(require("pareto-core-raw"));
const $$ = ($d) => {
    return ($, $c) => {
        //const contextPath = $.path
        function createWriterImp(newPath, $c) {
            const x = ps.createUnsafeDictionaryBuilder();
            $c({
                allowed: ($) => {
                    x.add($, null);
                },
                directory: ($, $c) => {
                    x.add($, null);
                    createWriterImp([newPath, $], $c);
                },
                file: ($, $c) => {
                    x.add($, null);
                    $d.createWriteStream([newPath, $], ($i) => {
                        $d.pipeFountainPen(null, $c, $i);
                    });
                }
            });
            const y = x.getDictionary();
            $d.getNodes(newPath)._execute(($) => {
                $.forEach(() => false, ($, key) => {
                    pr.getEntry(y, key, () => {
                        //
                    }, () => {
                        $d.reportSuperfluousNode({
                            path: newPath,
                            name: key,
                        });
                    });
                });
            });
            //x.getDictionary().
        }
        createWriterImp([$], $c);
    };
};
exports.$$ = $$;
