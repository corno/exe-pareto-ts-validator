import * as mcommon from "glo-pareto-common";
import * as mdefinition from "../../../submodules/definition";
export declare namespace T {
    namespace GenerateImplementationData {
        namespace generation {
            type grammar = mdefinition.T.Grammar;
            type pathToInterface = string;
        }
        type generation = {
            readonly 'grammar': mdefinition.T.Grammar;
            readonly 'pathToInterface': string;
        };
        type rootPath = mcommon.T.Path;
    }
    type GenerateImplementationData = {
        readonly 'generation': {
            readonly 'grammar': mdefinition.T.Grammar;
            readonly 'pathToInterface': string;
        };
        readonly 'rootPath': mcommon.T.Path;
    };
    namespace GenerateInterfaceData {
        namespace generation {
            type grammar = mdefinition.T.Grammar;
        }
        type generation = {
            readonly 'grammar': mdefinition.T.Grammar;
        };
        type rootPath = mcommon.T.Path;
    }
    type GenerateInterfaceData = {
        readonly 'generation': {
            readonly 'grammar': mdefinition.T.Grammar;
        };
        readonly 'rootPath': mcommon.T.Path;
    };
    namespace SerializeData {
        type grammar = mdefinition.T.Grammar;
        type rootPath = mcommon.T.Path;
    }
    type SerializeData = {
        readonly 'grammar': mdefinition.T.Grammar;
        readonly 'rootPath': mcommon.T.Path;
    };
}
