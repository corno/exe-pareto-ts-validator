"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const mfp = __importStar(require("lib-fountain-pen"));
const unboundGenerateInterface_p_1 = require("./unboundGenerateInterface.p");
const mprivate = __importStar(require("../../submodules/private"));
const mforeach = __importStar(require("res-pareto-foreach"));
const mcoll = __importStar(require("res-pareto-collation"));
const mtostring = __importStar(require("res-pareto-tostring"));
const $$ = ($) => {
    const dfe = mforeach.$a.createDictionaryForEach({
        'compare': mcoll.$a.localeIsABeforeB,
    });
    mfp.$a.createWriter({
        'onError': ($) => {
            pl.logDebugMessage("FSDFSDSFDFSDFS");
        },
        'reportSuperfluousNode': ($) => {
            pl.logDebugMessage("SDSFS");
        },
    })([$.rootPath], ($i) => {
        (0, unboundGenerateInterface_p_1.$$)({
            'generateFunctions': mprivate.$a.generateFunctions({}),
            'generateInterfaceIndex': mprivate.$a.generateInterfaceIndex,
            'generateTypes': mprivate.$a.generateTypes({
                'joinNestedStrings': mtostring.$a.joinNestedStrings,
                'sortedForEach': dfe,
            }),
            'generateVisitorInterface': mprivate.$a.generateVisitorInterface({
                'sortedForEach': dfe,
            }),
        })($, $i);
    });
};
exports.$$ = $$;
