"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($, $i) => {
        function serializeNode2($, $i) {
            const name = $.name;
            switch ($.type[0]) {
                case 'composite':
                    pl.cc($.type[1], ($) => {
                        $i.snippet(`composite("${name}", `);
                        serializeValue($, $i);
                        $i.snippet(`)`);
                    });
                    break;
                case 'leaf':
                    pl.cc($.type[1], ($) => {
                        $i.snippet(`leaf("${name}", ${$.hasTextContent ? `true` : `false`})`);
                    });
                    break;
                default: pl.au($.type[0]);
            }
        }
        function serializeValue($, $i) {
            const val = $.type;
            if ($.cardinality === undefined) {
                $i.snippet(`one(`);
                serializeValueType(val, $i);
                $i.snippet(`)`);
            }
            else {
                switch ($.cardinality[0]) {
                    case 'array':
                        pl.cc($.cardinality[1], ($) => {
                            $i.snippet(`array(`);
                            serializeValueType(val, $i);
                            $i.snippet(`)`);
                        });
                        break;
                    case 'one':
                        pl.cc($.cardinality[1], ($) => {
                            $i.snippet(`one(`);
                            serializeValueType(val, $i);
                            $i.snippet(`)`);
                        });
                        break;
                    case 'optional':
                        pl.cc($.cardinality[1], ($) => {
                            $i.snippet(`optional(`);
                            serializeValueType(val, $i);
                            $i.snippet(`)`);
                        });
                        break;
                    default: pl.au($.cardinality[0]);
                }
            }
        }
        function serializeValueType($, $i) {
            switch ($[0]) {
                case 'choice':
                    pl.cc($[1], ($) => {
                        $i.snippet(`choice({`);
                        $i.indent(($i) => {
                            $d.dictionaryForEach($.options, ($) => {
                                $i.nestedLine(($i) => {
                                    $i.snippet(`"${$.key}": `);
                                    serializeValue($.value, $i);
                                    $i.snippet(`,`);
                                });
                            });
                        });
                        $i.snippet(`})`);
                    });
                    break;
                case 'node':
                    pl.cc($[1], ($) => {
                        $i.snippet(`node(`);
                        serializeNode2($, $i);
                        $i.snippet(`)`);
                    });
                    break;
                case 'reference':
                    pl.cc($[1], ($) => {
                        $i.snippet(`reference("${$.name}")`);
                    });
                    break;
                case 'sequence':
                    pl.cc($[1], ($) => {
                        $i.snippet(`sequence([`);
                        $i.indent(($i) => {
                            $.elements.forEach(($) => {
                                $i.nestedLine(($i) => {
                                    $i.snippet(`e("${$.name}", `);
                                    serializeValue($.value, $i);
                                    $i.snippet(`),`);
                                });
                            });
                        });
                        $i.snippet(`])`);
                    });
                    break;
                default: pl.au($[0]);
            }
        }
        $i.line(`import * as pd from 'pareto-core-data'`);
        $i.line(``);
        $i.line(`import * as mgr from "../../../pub/dist/submodules/definition"`);
        $i.line(``);
        $i.line(`const d = pd.wrapRawDictionary`);
        $i.line(``);
        $i.nestedLine(($i) => {
            $i.snippet(`export const $: mgr.T.Grammar = {`);
            $i.indent(($i) => {
                $i.nestedLine(($i) => {
                    $i.snippet(`'globalValueTypes': d({`);
                    $i.indent(($i) => {
                        $d.dictionaryForEach($.globalValueTypes, ($) => {
                            $i.nestedLine(($i) => {
                                $i.snippet(`"${$.key}": `);
                                serializeValueType($.value, $i);
                                $i.snippet(`,`);
                            });
                        });
                        $i.nestedLine(($i) => {
                            $i.snippet(``);
                        });
                    });
                    $i.snippet(`}),`);
                });
                $i.nestedLine(($i) => {
                    $i.snippet(`'root': `);
                    serializeNode2($.root, $i);
                    $i.snippet(`,`);
                });
            });
            $i.snippet(`}`);
        });
    };
};
exports.$$ = $$;
