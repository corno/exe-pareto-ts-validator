"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sequence = exports.reference = exports.optional = exports.one = exports.leaf = exports.e = exports.composite = exports.node = exports.choice = exports.array = void 0;
const pd = __importStar(require("pareto-core-data"));
function array(vt) {
    return {
        'cardinality': ['array', {}],
        'type': vt,
    };
}
exports.array = array;
function choice(options) {
    return ['choice', { 'options': pd.wrapRawDictionary(options) }];
}
exports.choice = choice;
function node(node) {
    return ['node', node];
}
exports.node = node;
function composite(name, value) {
    return {
        'name': name,
        'type': ['composite', value]
    };
}
exports.composite = composite;
function e(name, value) {
    return {
        'name': name,
        'value': value,
    };
}
exports.e = e;
function leaf(name, hasTextContent) {
    return {
        'name': name,
        'type': ['leaf', {
                'hasTextContent': hasTextContent,
            }]
    };
}
exports.leaf = leaf;
function one(type) {
    return {
        'cardinality': ['one', {}],
        'type': type,
    };
}
exports.one = one;
function optional(type) {
    return {
        'cardinality': ['optional', {}],
        'type': type,
    };
}
exports.optional = optional;
function reference(name) {
    return ['reference', {
            'name': name,
        }];
}
exports.reference = reference;
function sequence(elements) {
    return ['sequence', {
            'elements': pd.wrapRawArray(elements),
        }];
}
exports.sequence = sequence;
