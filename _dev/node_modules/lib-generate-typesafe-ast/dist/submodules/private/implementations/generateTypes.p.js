"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($, $i) => {
        const grammar = $.grammar;
        function generateTypesForNode($, $w, path) {
            switch ($.type[0]) {
                case "composite":
                    pl.cc($.type[1], ($) => {
                        generateTypesForValue($, $w, path);
                    });
                    break;
                case "leaf":
                    pl.cc($.type[1], ($) => {
                    });
                    break;
                default:
                    pl.au($.type[0]);
            }
            $w.line(``);
            $w.nestedLine(($w) => {
                $w.snippet(`export type TN${path} = `);
                switch ($.type[0]) {
                    case "composite":
                        pl.cc($.type[1], ($) => {
                            $w.snippet(`TAnnotatedType<TV${path}>`);
                        });
                        break;
                    case "leaf":
                        pl.cc($.type[1], ($) => {
                            if ($.hasTextContent) {
                                $w.snippet(`TAnnotatedString`);
                            }
                            else {
                                $w.snippet(`uast.T.Details`);
                            }
                        });
                        break;
                    default:
                        pl.au($.type[0]);
                }
            });
        }
        function generateTypesForValueType($, $w, path) {
            switch ($[0]) {
                case "choice":
                    pl.cc($[1], ($) => {
                        $d.sortedForEach($.options, ($) => {
                            generateTypesForValue($.value, $w, $d.joinNestedStrings({
                                strings: [path, $.key],
                                separator: "_",
                            }));
                        });
                    });
                    break;
                case "reference":
                    pl.cc($[1], ($) => {
                        //
                    });
                    break;
                case "sequence":
                    pl.cc($[1], ($) => {
                        $.elements.forEach(($) => {
                            generateTypesForValue($.value, $w, $d.joinNestedStrings({
                                strings: [path, $.name],
                                separator: "_",
                            }));
                        });
                    });
                    break;
                case "node":
                    pl.cc($[1], ($) => {
                        generateTypesForNode($, $w, `${path}$`);
                    });
                    break;
                default:
                    pl.au($[0]);
            }
            $w.nestedLine(($w) => {
                $w.snippet(`export type TVT${path} = `);
                switch ($[0]) {
                    case "choice":
                        pl.cc($[1], ($) => {
                            $w.indent(($w) => {
                                $d.sortedForEach($.options, ($) => {
                                    $w.line(`| [ "${$.key}", TV${path}_${$.key}]`);
                                });
                            });
                        });
                        break;
                    case "reference":
                        pl.cc($[1], ($) => {
                            $w.snippet(`TG${$.name}`);
                        });
                        break;
                    case "sequence":
                        pl.cc($[1], ($) => {
                            $w.snippet(`{`);
                            $w.indent(($w) => {
                                $.elements.forEach(($) => {
                                    $w.line(`readonly "${$.name}":  TV${path}_${$.name}`);
                                });
                            });
                            $w.snippet(`}`);
                        });
                        break;
                    case "node":
                        pl.cc($[1], ($) => {
                            $w.snippet(`TN${path}$`);
                        });
                        break;
                    default:
                        pl.au($[0]);
                }
            });
        }
        function generateTypesForValue($, $w, path) {
            generateTypesForValueType($.type, $w, path);
            $w.nestedLine(($w) => {
                $w.snippet(`export type TV${path} = `);
                if (pl.isNotUndefined($.cardinality)) {
                    switch ($.cardinality[0]) {
                        case "array":
                            pl.cc($.cardinality[1], ($) => {
                                $w.snippet(`pt.Array<TVT${path}>`);
                            });
                            break;
                        case "one":
                            pl.cc($.cardinality[1], ($) => {
                                $w.snippet(`TVT${path}`);
                            });
                            break;
                        case "optional":
                            pl.cc($.cardinality[1], ($) => {
                                $w.snippet(`null | TVT${path}`);
                            });
                            break;
                        default:
                            pl.au($.cardinality[0]);
                    }
                }
                else {
                    $w.snippet(`TVT${path}`);
                }
            });
        }
        pl.cc($i, ($w) => {
            $w.line(`import * as pt from 'pareto-core-types'`);
            $w.nestedLine(($w) => {
            });
            $w.line(`import * as uast from "glo-typescript-untyped-ast"`);
            $w.nestedLine(($w) => {
            });
            $w.line(`export type TAnnotatedString = { readonly "tokenDetails": uast.T.Details; readonly "value": string }`);
            $w.line(`export type TAnnotatedType<Type> = { readonly "tokenDetails": uast.T.Details; readonly "content": Type }`);
            $d.sortedForEach(grammar.globalValueTypes, ($) => {
                generateTypesForValueType($.value, $w, `G${$.key}`);
                $w.line(`export type TG${$.key} = TVTG${$.key}`);
            });
            generateTypesForNode(grammar.root, $w, "root");
            $w.line(`export type TRoot = TNroot`);
        });
    };
};
exports.$$ = $$;
