"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($, $i) => {
        const grammar = $.grammar;
        pl.cc(($i), $w => {
            $w.line(`import * as pt from 'pareto-core-types'`);
            $w.line(`import * as types from "../types/ts_api.generated"`);
            $w.line(``);
            $w.nestedLine(($w) => {
                $w.snippet(`export type IVisitor = {`);
                $w.indent(($w) => {
                    function generateNode($, $w, pathForCode, pathForReporting) {
                        switch ($.type[0]) {
                            case "composite":
                                pl.cc($.type[1], ($) => {
                                    generateValue($, $w, pathForCode, pathForReporting);
                                });
                                break;
                            case "leaf":
                                pl.cc($.type[1], ($) => {
                                });
                                break;
                            default:
                                pl.au($.type[0]);
                        }
                        $w.nestedLine(($w) => {
                            $w.snippet(`readonly "${pathForReporting}"?: `);
                            switch ($.type[0]) {
                                case "composite":
                                    pl.cc($.type[1], ($) => {
                                        $w.snippet(`{`);
                                        $w.indent(($w) => {
                                            $w.line(`readonly "begin": ($: types.TN${pathForCode}) => void,`);
                                            $w.line(`readonly "end": ($: types.TN${pathForCode}) => void,`);
                                        });
                                        $w.snippet(`}`);
                                    });
                                    break;
                                case "leaf":
                                    pl.cc($.type[1], ($) => {
                                        $w.snippet(`($: types.TN${pathForCode}) => void`);
                                    });
                                    break;
                                default:
                                    pl.au($.type[0]);
                            }
                        });
                    }
                    function generateValueType($, $w, pathForCode, pathForReporting) {
                        switch ($[0]) {
                            case "choice":
                                pl.cc($[1], ($) => {
                                    $d.sortedForEach($.options, ($) => {
                                        generateValue($.value, $w, `${pathForCode}_${$.key}`, `${pathForReporting}/?${$.key}`);
                                    });
                                });
                                break;
                            case "reference":
                                pl.cc($[1], ($) => {
                                });
                                break;
                            case "sequence":
                                pl.cc($[1], ($) => {
                                    $.elements.forEach(($) => {
                                        generateValue($.value, $w, `${pathForCode}_${$.name}`, `${pathForReporting}/.${$.name}`);
                                    });
                                });
                                break;
                            case "node":
                                pl.cc($[1], ($) => {
                                    generateNode($, $w, `${pathForCode}$`, `${pathForReporting}/*${$.name}`);
                                });
                                break;
                            default:
                                pl.au($[0]);
                        }
                    }
                    function generateValue($, $w, pathForCode, pathForReporting) {
                        const symbol = $;
                        generateValueType(symbol.type, $w, pathForCode, pathForReporting);
                    }
                    $d.sortedForEach(grammar.globalValueTypes, ($) => {
                        generateValueType($.value, $w, `G${$.key}`, `$${$.key}`);
                    });
                    generateNode(grammar.root, $w, "root", "");
                });
                $w.snippet(`}`);
            });
        });
    };
};
exports.$$ = $$;
