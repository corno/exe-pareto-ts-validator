import * as pt from 'pareto-core-types';
import * as mfs from "res-pareto-filesystem";
export declare namespace T {
    namespace DirNodeData {
        type path = string;
        namespace _ltype {
            type directory = null;
            type file = null;
            type _lunknown = null;
        }
        type _ltype = ['directory', null] | ['file', null] | ['unknown', null];
    }
    type DirNodeData = {
        readonly 'path': string;
        readonly 'type': ['directory', null] | ['file', null] | ['unknown', null];
    };
    namespace ReadDirectoryResult {
        type D = T.DirNodeData;
    }
    type ReadDirectoryResult = pt.Dictionary<T.DirNodeData>;
    namespace ReadOptionalDirectoryData {
        namespace allow {
            type isNotADirectory = boolean;
            type noEntity = boolean;
        }
        type allow = {
            readonly 'isNotADirectory'?: boolean;
            readonly 'noEntity'?: boolean;
        };
        type fs = mfs.T.ReadDirectory_$Data;
    }
    type ReadOptionalDirectoryData = {
        readonly 'allow': {
            readonly 'isNotADirectory'?: boolean;
            readonly 'noEntity'?: boolean;
        };
        readonly 'fs': mfs.T.ReadDirectory_$Data;
    };
    namespace ReadOptionalDirectoryResult {
        type O = T.ReadDirectoryResult;
    }
    type ReadOptionalDirectoryResult = [false] | [true, T.ReadDirectoryResult];
}
