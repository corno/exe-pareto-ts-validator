"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
const pl = __importStar(require("pareto-core-lib"));
const $$ = ($d) => {
    return ($) => {
        const allow = $.allow;
        return $d.readDirectory($.fs).setCondition(($) => {
            switch ($[0]) {
                case 'error':
                    return pl.cc($[1], ($) => {
                        const err = $;
                        switch ($.error[0]) {
                            case 'is not directory':
                                return pl.cc($.error[1], ($) => {
                                    if (allow.isNotADirectory) {
                                        return pl.asyncValue([false]);
                                    }
                                    else {
                                        $d.onError(err);
                                        return undefined;
                                    }
                                });
                            case 'no entity':
                                return pl.cc($.error[1], ($) => {
                                    if (allow.noEntity) {
                                        return pl.asyncValue([false]);
                                    }
                                    else {
                                        $d.onError(err);
                                        return undefined;
                                    }
                                });
                            case 'unknown':
                                return pl.cc($.error[1], ($) => {
                                    $d.onError(err);
                                    return undefined;
                                });
                            default: return pl.au($.error[0]);
                        }
                    });
                case 'success':
                    return pl.cc($[1], ($) => {
                        return pl.asyncValue([true, $]);
                    });
                default: return pl.au($[0]);
            }
        });
    };
};
exports.$$ = $$;
