"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLocationInfo = void 0;
const process = __importStar(require("process"));
const path = __importStar(require("path"));
function getLocationInfo(depth) {
    function getLine() {
        const e = new Error();
        const regex = /\((.*)\)$/;
        //const regex = /\((.*):(\d+):(\d+)\)$/ //further splitted; file,line,column,
        if (e.stack === undefined) {
            throw new Error("NO STACK INFO");
        }
        const line = e.stack.split("\n")[depth + 2];
        const match = regex.exec(line);
        return path.relative(process.cwd(), (() => {
            if (match === null) {
                const begin = "    at /";
                if (line.startsWith(begin)) {
                    return path.relative(process.cwd(), line.substring(begin.length - 1));
                }
                else {
                    throw new Error(`COULD NOT PARSE STACK LINE: ${line}`);
                }
            }
            else {
                return match[1];
            }
        })());
    }
    const split = getLine().split(":");
    if (split.length !== 3) {
        throw new Error(`UNEXPECTED LOCATION FORMAT: ${split}`);
    }
    return {
        'file': split[0],
        'line': split[1],
        'column': split[2],
    };
}
exports.getLocationInfo = getLocationInfo;
