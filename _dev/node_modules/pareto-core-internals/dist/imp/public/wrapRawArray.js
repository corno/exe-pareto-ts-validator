"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapRawArray = void 0;
const createCounter_1 = require("../private/createCounter");
const wrapAsyncValueImp_1 = require("./wrapAsyncValueImp");
function wrapRawArray(source) {
    if (!(source instanceof Array)) {
        throw new Error("invalid input in 'createArray'");
    }
    return {
        forEach: ($i) => {
            source.forEach(($) => {
                $i($);
            });
        },
        map: ($v) => {
            return wrapRawArray(source.map((entry) => {
                return $v(entry);
            }));
        },
        reduce: ($, $v) => {
            let current = $;
            source.forEach(($) => {
                current = $v(current, $);
            });
            return current;
        },
        filter: ($v) => {
            const filtered = [];
            source.forEach(($) => {
                const result = $v($);
                if (result !== undefined) {
                    filtered.push(result);
                }
            });
            return wrapRawArray(filtered);
        },
        asyncMap: ($v) => {
            // const elements = source.map($v)
            // let _isGuaranteedToReturnAResult = true
            // source.forEach(($) => {
            //     if ($)
            // })
            function array(array, $v) {
                const mapped = array.map($v);
                let _isGuaranteedToReturnAResult = true;
                mapped.forEach(($) => {
                    if (!$._isGuaranteedToReturnAResult) {
                        _isGuaranteedToReturnAResult = false;
                    }
                });
                return (0, wrapAsyncValueImp_1.wrapAsyncValueImp)(_isGuaranteedToReturnAResult, ($c) => {
                    const temp = [];
                    (0, createCounter_1.createCounter)((counter) => {
                        mapped.forEach((v) => {
                            counter.increment();
                            v._execute((v) => {
                                temp.push(v);
                                counter.decrement();
                            });
                        });
                    }, () => {
                        $c(wrapRawArray(temp));
                    });
                });
            }
            return array(source, $v);
        },
    };
}
exports.wrapRawArray = wrapRawArray;
