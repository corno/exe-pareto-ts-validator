"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapRawDictionary = void 0;
const createCounter_1 = require("../private/createCounter");
const wrapAsyncValueImp_1 = require("./wrapAsyncValueImp");
function wrapRawDictionary(source) {
    function createDictionaryAsArray(source) {
        const imp = [];
        Object.keys(source).forEach((key) => {
            imp.push({ key: key, value: source[key] });
        });
        return imp;
    }
    function createDictionaryImp(source) {
        return {
            map: ($v) => {
                return createDictionaryImp(source.map(($) => {
                    return {
                        key: $.key,
                        value: $v($.value, $.key)
                    };
                }));
            },
            forEach: (isFirstBeforeSecond, callback) => {
                const sortedKeys = source.map((entry, position) => {
                    return {
                        key: entry.key,
                        position: position
                    };
                }).sort((a, b) => {
                    if (isFirstBeforeSecond(a.key, b.key)) {
                        return -1;
                    }
                    else {
                        if (isFirstBeforeSecond(b.key, a.key)) {
                            return 1;
                        }
                        else {
                            return 0;
                        }
                    }
                });
                sortedKeys.forEach((sorted) => {
                    callback(source[sorted.position].value, sorted.key);
                });
            },
            filter: ($v) => {
                const filtered = [];
                source.forEach(($) => {
                    const result = $v($.value, $.key);
                    if (result !== undefined) {
                        filtered.push({
                            key: $.key,
                            value: result
                        });
                    }
                });
                return createDictionaryImp(filtered);
            },
            reduce: (initialValue, $v) => {
                let current = initialValue;
                source.forEach(($) => {
                    current = $v(current, $.value, $.key);
                });
                return current;
            },
            asyncMap: ($v) => {
                function imp(dictionary, $v) {
                    const mapped = dictionary.map(($) => {
                        return {
                            key: $.key,
                            value: $v($.value, $.key),
                        };
                    });
                    let _isGuaranteedToReturnAResult = true;
                    mapped.forEach(($) => {
                        if (!$.value._isGuaranteedToReturnAResult) {
                            _isGuaranteedToReturnAResult = false;
                        }
                    });
                    return (0, wrapAsyncValueImp_1.wrapAsyncValueImp)(_isGuaranteedToReturnAResult, (cb) => {
                        const temp = {};
                        (0, createCounter_1.createCounter)((counter) => {
                            mapped.map(($) => {
                                counter.increment();
                                $.value._execute((nv) => {
                                    temp[$.key] = nv;
                                    counter.decrement();
                                });
                            });
                        }, () => {
                            cb(wrapRawDictionary(temp));
                        });
                    });
                }
                return imp(source, $v);
            }
        };
    }
    //first we clone the source data so that changes to that source will have no impact on this implementation.
    //only works if the set does not become extremely large
    const daa = createDictionaryAsArray(source);
    return createDictionaryImp(daa);
}
exports.wrapRawDictionary = wrapRawDictionary;
