"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.$$ = void 0;
//import * as fs from "fs"
const pi = __importStar(require("pareto-core-internals"));
const joinPath_native_1 = require("../native/joinPath.native");
const createDirNodeData_native_1 = require("../native/createDirNodeData.native");
const readdir_native_1 = require("../native/readdir.native");
const wrapRawDictionary_native_1 = require("../native/wrapRawDictionary.native");
const $$ = ($) => {
    const joinedPath = (0, joinPath_native_1.joinPath)($.path);
    return pi.wrapAsyncValueImp(true, (cb) => {
        (0, readdir_native_1.readdir)(joinedPath, {
            withFileTypes: true,
        }, (err, files) => {
            if (err !== null) {
                const errCode = err.code;
                const errMessage = err.message;
                function createError() {
                    switch (errCode) {
                        case 'ENOENT':
                            return ['no entity', null];
                        case 'ENOTDIR':
                            return ['is not directory', null];
                        default: {
                            console.error(`DEV TODO: ADD THIS OPTION TO pareto-filesystem READDIR: ${errMessage}`);
                            return ['unknown', { message: errMessage }];
                        }
                    }
                }
                cb(['error', {
                        error: createError(),
                        path: joinedPath
                    }]);
            }
            else {
                const values = {};
                files.forEach(($) => {
                    values[$.name] = (0, createDirNodeData_native_1.createDirNodeData)((0, joinPath_native_1.joinPath)([joinedPath, $.name]), $);
                });
                cb(['success', (0, wrapRawDictionary_native_1.wrapRawDictionary)(values)]);
            }
        });
    });
};
exports.$$ = $$;
