import * as pt from 'pareto-core-types';
export declare type TTypedArray<T> = pt.Array<T>;
export declare type TTypedDictionary<T> = pt.Dictionary<T>;
export declare type TTypedKeyValueDictionary<T> = pt.Dictionary<{
    key: string;
    value: T;
}>;
export declare type FDecorateDictionaryEntriesWithKey = <T>($: TTypedDictionary<T>) => TTypedKeyValueDictionary<T>;
export declare type FArrayForEach = <T>($: TTypedArray<T>, $i: ($i: {
    value: T;
}) => void) => void;
export declare type FDictionaryForEach = <T>($: pt.Dictionary<T>, $i: ($i: {
    key: string;
    value: T;
}) => void) => void;
export declare type FEnrichedDictionaryForEach = <T>($: pt.Dictionary<T>, $i: {
    onEmpty: () => void;
    onNotEmpty: ($c: ($i: ($: {
        key: string;
        value: T;
        isFirst: boolean;
        isLast: boolean;
    }) => void) => void) => void;
}) => void;
export declare type FEnrichedArrayForEach = <T>($: pt.Array<T>, $i: {
    onEmpty: () => void;
    onNotEmpty: ($c: ($i: ($: {
        value: T;
        isFirst: boolean;
        isLast: boolean;
    }) => void) => void) => void;
}) => void;
