"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateCreateDefaultVisitor = void 0;
const pl = __importStar(require("pareto-core-lib"));
const pr = __importStar(require("pareto-core-raw"));
const generateCreateDefaultVisitor = ($, $i) => {
    const grammar = $.grammar;
    pl.cc(($i.block), $w => {
        $w.line({}, ($w) => {
            $w.snippet(`import * as pt from "pareto-core-types"`);
        });
        $w.line({}, ($w) => {
            $w.snippet(`import * as api from "${$.pathToInterface}"`);
        });
        $w.line({}, ($w) => { });
        $w.line({}, ($w) => {
            $w.snippet(`export function createDefaultVisistor<ImplementationDetails>(`);
            $w.indent({}, ($w) => {
                $w.line({}, ($w) => {
                    $w.snippet(`$i: {`);
                    $w.indent({}, ($w) => {
                        $w.line({}, ($w) => {
                            $w.snippet(`log: ($: string) => void`);
                        });
                    });
                    $w.snippet(`}`);
                });
            });
            $w.snippet(`): api.IVisitor<ImplementationDetails> {`);
            $w.indent({}, ($w) => {
                $w.line({}, ($w) => {
                    $w.snippet(`return {`);
                    $w.indent({}, ($w) => {
                        function generateNode($, $w, path) {
                            switch ($.type[0]) {
                                case "composite":
                                    pl.cc($.type[1], ($) => {
                                        generateValue($, $w, path);
                                    });
                                    break;
                                case "leaf":
                                    pl.cc($.type[1], ($) => {
                                    });
                                    break;
                                default:
                                    pl.au($.type[0]);
                            }
                            $w.line({}, ($w) => {
                                $w.snippet(`"${path}": `);
                                switch ($.type[0]) {
                                    case "composite":
                                        pl.cc($.type[1], ($) => {
                                            $w.snippet(`{`);
                                            $w.indent({}, ($w) => {
                                                $w.line({}, ($w) => {
                                                    $w.snippet(`begin: ($) => { $i.log("${path} begin") },`);
                                                });
                                                $w.line({}, ($w) => {
                                                    $w.snippet(`end: ($) => { $i.log("${path} end") },`);
                                                });
                                            });
                                            $w.snippet(`},`);
                                        });
                                        break;
                                    case "leaf":
                                        pl.cc($.type[1], ($) => {
                                            $w.snippet(`($) => { $i.log("${path}") },`);
                                        });
                                        break;
                                    default:
                                        pl.au($.type[0]);
                                }
                            });
                        }
                        function generateValueType($, $w, path) {
                            switch ($[0]) {
                                case "choice":
                                    pl.cc($[1], ($) => {
                                        pr.wrapRawDictionary($.options).forEach(() => false, (option, key) => {
                                            generateValue(option, $w, `${path}/?${key}`);
                                        });
                                    });
                                    break;
                                case "reference":
                                    pl.cc($[1], ($) => {
                                    });
                                    break;
                                case "sequence":
                                    pl.cc($[1], ($) => {
                                        pr.wrapRawArray($.elements).forEach(($) => {
                                            generateValue($.value, $w, `${path}/.${$.name}`);
                                        });
                                    });
                                    break;
                                case "node":
                                    pl.cc($[1], ($) => {
                                        generateNode($, $w, `${path}/*${$.name}`);
                                    });
                                    break;
                                default:
                                    pl.au($[0]);
                            }
                        }
                        function generateValue($, $w, path) {
                            const symbol = $;
                            generateValueType(symbol.type, $w, path);
                        }
                        pr.wrapRawDictionary(grammar.globalValueTypes).forEach(() => false, ($, key) => {
                            generateValueType($, $w, `$${key}`);
                        });
                        generateNode(grammar.root, $w, "");
                    });
                    $w.snippet(`}`);
                });
            });
            $w.snippet(`}`);
        });
    });
};
exports.generateCreateDefaultVisitor = generateCreateDefaultVisitor;
