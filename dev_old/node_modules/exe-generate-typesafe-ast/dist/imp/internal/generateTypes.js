"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateTypes = void 0;
const pl = __importStar(require("pareto-core-lib"));
const pr = __importStar(require("pareto-core-raw"));
const generateTypes = ($, $i) => {
    const grammar = $.grammar;
    function generateTypesForNode($, $w, path) {
        switch ($.type[0]) {
            case "composite":
                pl.cc($.type[1], ($) => {
                    generateTypesForValue($, $w, path);
                });
                break;
            case "leaf":
                pl.cc($.type[1], ($) => {
                });
                break;
            default:
                pl.au($.type[0]);
        }
        $w.line({}, ($w) => {
            $w.snippet(``);
        });
        $w.line({}, ($w) => {
            $w.snippet(`export type TN${path}<Annotation> = `);
            switch ($.type[0]) {
                case "composite":
                    pl.cc($.type[1], ($) => {
                        $w.snippet(`TAnnotatedType<Annotation, TV${path}<Annotation>>`);
                    });
                    break;
                case "leaf":
                    pl.cc($.type[1], ($) => {
                        if ($.hasTextContent) {
                            $w.snippet(`TAnnotatedString<Annotation>`);
                        }
                        else {
                            $w.snippet(`Annotation`);
                        }
                    });
                    break;
                default:
                    pl.au($.type[0]);
            }
        });
    }
    function generateTypesForValueType($, $w, path) {
        switch ($[0]) {
            case "choice":
                pl.cc($[1], ($) => {
                    pr.wrapRawDictionary($.options).forEach(() => false, (option, key) => {
                        generateTypesForValue(option, $w, path + "_" + key);
                    });
                });
                break;
            case "reference":
                pl.cc($[1], ($) => {
                    //
                });
                break;
            case "sequence":
                pl.cc($[1], ($) => {
                    pr.wrapRawArray($.elements).forEach(($) => {
                        generateTypesForValue($.value, $w, path + "_" + $.name);
                    });
                });
                break;
            case "node":
                pl.cc($[1], ($) => {
                    generateTypesForNode($, $w, `${path}$`);
                });
                break;
            default:
                pl.au($[0]);
        }
        $w.line({}, ($w) => {
            $w.snippet(`export type TVT${path}<Annotation> = `);
            switch ($[0]) {
                case "choice":
                    pl.cc($[1], ($) => {
                        $w.indent({}, ($w) => {
                            pr.wrapRawDictionary($.options).forEach(() => false, (option, key) => {
                                $w.line({}, ($w) => {
                                    $w.snippet(`| [ "${key}", TV${path}_${key}<Annotation>]`);
                                });
                            });
                        });
                    });
                    break;
                case "reference":
                    pl.cc($[1], ($) => {
                        $w.snippet(`TG${$.name}<Annotation>`);
                    });
                    break;
                case "sequence":
                    pl.cc($[1], ($) => {
                        $w.snippet(`{`);
                        $w.indent({}, ($w) => {
                            pr.wrapRawArray($.elements).forEach(($) => {
                                $w.line({}, ($w) => {
                                    $w.snippet(`readonly "${$.name}":  TV${path}_${$.name}<Annotation>`);
                                });
                            });
                        });
                        $w.snippet(`}`);
                    });
                    break;
                case "node":
                    pl.cc($[1], ($) => {
                        $w.snippet(`TN${path}$<Annotation>`);
                    });
                    break;
                default:
                    pl.au($[0]);
            }
        });
    }
    function generateTypesForValue($, $w, path) {
        generateTypesForValueType($.type, $w, path);
        $w.line({}, ($w) => {
            $w.snippet(`export type TV${path}<Annotation> = `);
            if ($.cardinality === undefined) {
                $w.snippet(`TVT${path}<Annotation>`);
            }
            else {
                switch ($.cardinality[0]) {
                    case "array":
                        pl.cc($.cardinality[1], ($) => {
                            $w.snippet(`pt.Array<TVT${path}<Annotation>>`);
                        });
                        break;
                    case "one":
                        pl.cc($.cardinality[1], ($) => {
                            $w.snippet(`TVT${path}<Annotation>`);
                        });
                        break;
                    case "optional":
                        pl.cc($.cardinality[1], ($) => {
                            $w.snippet(`null | TVT${path}<Annotation>`);
                        });
                        break;
                    default:
                        pl.au($.cardinality[0]);
                }
            }
        });
    }
    pl.cc($i.block, ($w) => {
        $w.line({}, ($w) => {
            $w.snippet(`import * as pt from "pareto-core-types"`);
        });
        $w.line({}, ($w) => {
        });
        $w.line({}, ($w) => {
            $w.snippet(`export type TAnnotatedString<Annotation> = { readonly "annotation": Annotation; readonly "value": string }`);
        });
        $w.line({}, ($w) => {
            $w.snippet(`export type TAnnotatedType<Annotation, Type> = { readonly "annotation": Annotation; readonly "content": Type }`);
        });
        pr.wrapRawDictionary(grammar.globalValueTypes).forEach(() => false, ($, key) => {
            generateTypesForValueType($, $w, `G${key}`);
            $w.line({}, ($w) => {
                $w.snippet(`export type TG${key}<Annotation> =  TVTG${key}<Annotation>`);
            });
        });
        generateTypesForNode(grammar.root, $w, "root");
        $w.line({}, ($w) => {
            $w.snippet(`export type TRoot<Annotation> = TNroot<Annotation>`);
        });
    });
};
exports.generateTypes = generateTypes;
