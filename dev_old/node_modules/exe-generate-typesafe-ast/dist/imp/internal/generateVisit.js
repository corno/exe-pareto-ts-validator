"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateVisit = void 0;
const pl = __importStar(require("pareto-core-lib"));
const pr = __importStar(require("pareto-core-raw"));
const generateVisit = ($, $i) => {
    const grammar = $.grammar;
    pl.cc($i.block, ($w) => {
        $w.line({}, ($w) => {
            $w.snippet(`import * as pl from "pareto-core-lib"`);
        });
        $w.line({}, ($w) => {
            $w.snippet(`import * as api from "${$.pathToInterface}"`);
        });
        $w.line({}, ($w) => { });
        $w.line({}, ($w) => {
            $w.snippet(`export function visit<Annotation>(`);
            $w.indent({}, ($w) => {
                $w.line({}, ($w) => {
                    $w.snippet(`$: api.TNroot<Annotation>,`);
                });
                $w.line({}, ($w) => {
                    $w.snippet(`$i: {`);
                    $w.indent({}, ($w) => {
                        $w.line({}, ($w) => {
                            $w.snippet(`visitor: api.IVisitor<Annotation>,`);
                        });
                    });
                    $w.snippet(`}`);
                });
            });
            $w.snippet(`): void {`);
            $w.indent({}, ($w) => {
                function generateNode($, $w, pathForCode, pathForReporting) {
                    $w.line({}, ($w) => {
                        $w.snippet(`((`);
                        $w.indent({}, ($w) => {
                            $w.line({}, ($w) => {
                                $w.snippet(`$: api.TN${pathForCode}<Annotation>,`);
                            });
                        });
                        $w.snippet(`) => {`);
                        $w.indent({}, ($w) => {
                            switch ($.type[0]) {
                                case "composite":
                                    pl.cc($.type[1], ($) => {
                                        $w.line({}, ($w) => {
                                            $w.snippet(`if ($i.visitor["${pathForReporting}"] !== undefined) { $i.visitor["${pathForReporting}"].begin($) }`);
                                        });
                                        $w.line({}, ($w) => {
                                            $w.snippet(`pl.cc($.content, ($) => {`);
                                            $w.indent({}, ($w) => {
                                                generateValue($, $w, pathForCode, pathForReporting);
                                            });
                                            $w.snippet(`})`);
                                        });
                                        $w.line({}, ($w) => {
                                            $w.snippet(`if ($i.visitor["${pathForReporting}"] !== undefined) { $i.visitor["${pathForReporting}"].end($) }`);
                                        });
                                    });
                                    break;
                                case "leaf":
                                    pl.cc($.type[1], ($) => {
                                        $w.line({}, ($w) => {
                                            $w.snippet(`if ($i.visitor["${pathForReporting}"] !== undefined) { $i.visitor["${pathForReporting}"]($) }`);
                                        });
                                    });
                                    break;
                                default:
                                    pl.au($.type[0]);
                            }
                        });
                        $w.snippet(`})($)`);
                    });
                }
                function generateValueType($, $w, pathForCode, pathForReporting) {
                    switch ($[0]) {
                        case "choice":
                            pl.cc($[1], ($) => {
                                $w.line({}, ($w) => {
                                    $w.snippet(`switch ($[0]) {`);
                                    $w.indent({}, ($w) => {
                                        pr.wrapRawDictionary($.options).forEach(() => false, (option, key) => {
                                            $w.line({}, ($w) => {
                                                $w.snippet(`case "${key}": {`);
                                                $w.indent({}, ($w) => {
                                                    $w.line({}, ($w) => {
                                                        $w.snippet(`pl.cc($[1], ($) => {`);
                                                        $w.indent({}, ($w) => {
                                                            generateValue(option, $w, `${pathForCode}_${key}`, `${pathForReporting}/?${key}`);
                                                        });
                                                        $w.snippet(`})`);
                                                    });
                                                    $w.line({}, ($w) => {
                                                        $w.snippet(`break`);
                                                    });
                                                });
                                                $w.snippet(`}`);
                                            });
                                        });
                                        $w.line({}, ($w) => {
                                            $w.snippet(`default: pl.au($[0])`);
                                        });
                                    });
                                    $w.snippet(`}`);
                                });
                            });
                            break;
                        case "reference":
                            pl.cc($[1], ($) => {
                                $w.line({}, ($w) => {
                                    $w.snippet(`X_${$.name}($)`);
                                });
                            });
                            break;
                        case "sequence":
                            pl.cc($[1], ($) => {
                                pr.wrapRawArray($.elements).forEach(($) => {
                                    $w.line({}, ($w) => {
                                        $w.snippet(`pl.cc($["${$.name}"], ($) => {`);
                                        $w.indent({}, ($w) => {
                                            generateValue($.value, $w, `${pathForCode}_${$.name}`, `${pathForReporting}/.${$.name}`);
                                        });
                                        $w.snippet(`})`);
                                    });
                                });
                            });
                            break;
                        case "node":
                            pl.cc($[1], ($) => {
                                generateNode($, $w, `${pathForCode}$`, `${pathForReporting}/*${$.name}`);
                            });
                            break;
                        default:
                            pl.au($[0]);
                    }
                }
                function generateValue($, $w, pathForCode, pathForReporting) {
                    const symbol = $;
                    if ($.cardinality === undefined) {
                        generateValueType(symbol.type, $w, `${pathForCode}`, `${pathForReporting}`);
                    }
                    else {
                        switch ($.cardinality[0]) {
                            case "array":
                                pl.cc($.cardinality[1], ($) => {
                                    $w.line({}, ($w) => {
                                        $w.snippet(`$.forEach(($) => {`);
                                        $w.indent({}, ($w) => {
                                            generateValueType(symbol.type, $w, `${pathForCode}`, `${pathForReporting}`);
                                        });
                                        $w.snippet(`})`);
                                    });
                                });
                                break;
                            case "one":
                                pl.cc($.cardinality[1], ($) => {
                                    generateValueType(symbol.type, $w, `${pathForCode}`, `${pathForReporting}`);
                                });
                                break;
                            case "optional":
                                pl.cc($.cardinality[1], ($) => {
                                    $w.line({}, ($w) => {
                                        $w.snippet(`if ($ === null) {`);
                                        $w.indent({}, ($w) => {
                                            $w.line({}, ($w) => {
                                                $w.snippet(`//FIXME??`);
                                            });
                                        });
                                        $w.snippet(`} else {`);
                                        $w.indent({}, ($w) => {
                                            generateValueType(symbol.type, $w, `${pathForCode}`, `${pathForReporting}`);
                                        });
                                        $w.snippet(`}`);
                                    });
                                });
                                break;
                            default:
                                pl.au($.cardinality[0]);
                        }
                    }
                }
                pr.wrapRawDictionary(grammar.globalValueTypes).forEach((a, b) => a > b, ($, key) => {
                    $w.line({}, ($w) => {
                        $w.snippet(`function X_${key}(`);
                        $w.indent({}, ($w) => {
                            $w.line({}, ($w) => {
                                $w.snippet(`$: api.TG${key}<Annotation>,`);
                            });
                        });
                        $w.snippet(`) {`);
                        $w.indent({}, ($w) => {
                            generateValueType($, $w, `G${key}`, `$${key}`);
                        });
                        $w.snippet(`}`);
                    });
                });
                generateNode(grammar.root, $w, "root", "");
            });
            $w.snippet(`}`);
        });
    });
};
exports.generateVisit = generateVisit;
