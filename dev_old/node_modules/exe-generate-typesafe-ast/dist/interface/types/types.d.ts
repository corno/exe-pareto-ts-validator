export declare type TOptions = {
    [key: string]: TValue;
};
export declare type TCardinality = ["one", {}] | ["optional", {}] | ["array", {}];
export declare type TSequenceElement = {
    readonly "name": string;
    readonly "value": TValue;
};
export declare type TValueType = [
    "reference",
    {
        readonly "name": string;
    }
] | [
    "choice",
    {
        readonly "options": TOptions;
    }
] | ["node", TNode2] | [
    "sequence",
    {
        readonly "elements": TSequenceElement[];
    }
];
export declare type TValue = {
    readonly "cardinality"?: TCardinality;
    readonly "type": TValueType;
};
export declare type TGrammar = {
    readonly "globalValueTypes": {
        [key: string]: TValueType;
    };
    readonly "root": TNode2;
};
export declare type TNode2 = {
    readonly "name": string;
    readonly "type": ["composite", TComposite] | ["leaf", TLeaf];
};
export declare type TLeaf = {
    readonly "hasTextContent": boolean;
};
export declare type TComposite = TValue;
