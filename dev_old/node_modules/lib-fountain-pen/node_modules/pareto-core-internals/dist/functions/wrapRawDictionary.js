"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapRawDictionary = void 0;
function wrapRawDictionary(source) {
    function createDictionaryAsArray(source) {
        const imp = [];
        Object.keys(source).forEach((key) => {
            imp.push({ key: key, value: source[key] });
        });
        return imp;
    }
    function createDictionaryImp(source) {
        return {
            map: (callback) => {
                return createDictionaryImp(source.map(($) => {
                    return {
                        key: $.key,
                        value: callback($.value, $.key)
                    };
                }));
            },
            forEach: (sort, callback) => {
                const sortedKeys = source.map((entry, position) => {
                    return {
                        key: entry.key,
                        position: position
                    };
                }).sort((a, b) => {
                    const after = sort(a.key, b.key);
                    return after ? 1 : -1;
                });
                sortedKeys.forEach((sorted) => {
                    callback(source[sorted.position].value, sorted.key);
                });
            },
            filter: (cb) => {
                const filtered = [];
                source.forEach(($) => {
                    const result = cb($.value, $.key);
                    if (result !== undefined) {
                        filtered.push({
                            key: $.key,
                            value: result
                        });
                    }
                });
                return createDictionaryImp(filtered);
            },
            reduce: (initialValue, callback) => {
                let current = initialValue;
                source.forEach(($) => {
                    current = callback(current, $.value, $.key);
                });
                return current;
            }
        };
    }
    //first we clone the source data so that changes to that source will have no impact on this implementation.
    //only works if the set does not become extremely large
    const daa = createDictionaryAsArray(source);
    return createDictionaryImp(daa);
}
exports.wrapRawDictionary = wrapRawDictionary;
