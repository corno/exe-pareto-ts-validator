"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createWriteStream = void 0;
const pl = __importStar(require("../internal/temp_switchStatemenSupportingFunctions"));
const writeFileImp_1 = require("../internal/writeFileImp");
const createContainingDirectories_1 = require("../internal/createContainingDirectories");
const joinPath_1 = require("../internal/joinPath");
const createWriteStream = ($, $i, $c) => {
    return {
        execute: (cb) => {
            //FIX use fs.createWriteStream
            const joinedPath = (0, joinPath_1.joinPath)($.path);
            let tmp = "";
            $c({
                onData: ($) => {
                    tmp += $;
                },
                onEnd: () => {
                    if ($.createContainingDirectories) {
                        (0, createContainingDirectories_1.createContainingDirectories)(joinedPath, () => {
                            (0, writeFileImp_1.writeFileImp)($.path, tmp, ($) => {
                                switch ($[0]) {
                                    case "error":
                                        pl.cc($[1], ($) => {
                                            $i.onError($);
                                        });
                                        break;
                                    case "success":
                                        pl.cc($[1], ($) => {
                                        });
                                        break;
                                    default: pl.au($[0]);
                                }
                                cb();
                            });
                        }, ($) => {
                            $i.onError({
                                error: $,
                                path: joinedPath,
                            });
                            cb();
                        });
                    }
                }
            });
        }
    };
};
exports.createWriteStream = createWriteStream;
