"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.readDirectory = void 0;
const fs = __importStar(require("fs"));
const pr = __importStar(require("pareto-core-internals"));
const joinPath_1 = require("../internal/joinPath");
const createDirNodeData_1 = require("../internal/createDirNodeData");
const readDirectory = ($) => {
    const joinedPath = (0, joinPath_1.joinPath)($.path);
    return {
        execute: (cb) => {
            fs.readdir(joinedPath, {
                withFileTypes: true,
            }, (err, files) => {
                if (err !== null) {
                    const errCode = err.code;
                    const errMessage = err.message;
                    function createError() {
                        switch (errCode) {
                            case "ENOENT":
                                return ["no entity", {}];
                            case "ENOTDIR":
                                return ["is not directory", {}];
                            default: {
                                console.error(`DEV TODO: ADD THIS OPTION TO pareto-filesystem READDIR: ${errMessage}`);
                                return ["unknown", { message: errMessage }];
                            }
                        }
                    }
                    cb(["error", {
                            error: createError(),
                            path: joinedPath
                        }]);
                }
                else {
                    let values = {};
                    files.forEach(($) => {
                        values[$.name] = (0, createDirNodeData_1.createDirNodeData)((0, joinPath_1.joinPath)([joinedPath, $.name]), $);
                    });
                    cb(["success", pr.wrapRawDictionary(values)]);
                }
            });
        }
    };
};
exports.readDirectory = readDirectory;
