"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createContainingDirectories = void 0;
const pl = __importStar(require("../internal/temp_switchStatemenSupportingFunctions"));
const mkDir_1 = require("../functions/mkDir");
const pth = __importStar(require("path"));
function createContainingDirectories(path, onDone, onError) {
    (0, mkDir_1.mkdir)({
        path: pth.dirname(path),
        createContainingDirectories: true,
    }).execute(($) => {
        switch ($[0]) {
            case "success":
                pl.cc($[1], ($) => {
                    onDone();
                });
                break;
            case "error":
                pl.cc($[1], ($) => {
                    const path = $.path;
                    switch ($.error[0]) {
                        case "exists":
                            pl.cc($.error[1], ($) => {
                                //not a real error
                                onDone();
                            });
                            break;
                        case "no entity":
                            pl.cc($.error[1], ($) => {
                                onError(["no entity", {}]);
                            });
                            break;
                        case "unknown":
                            pl.cc($.error[1], ($) => {
                                onError(["unknown", { message: $.message }]);
                            });
                            break;
                        default: pl.au($.error[0]);
                    }
                });
                break;
            default: pl.au($[0]);
        }
    });
}
exports.createContainingDirectories = createContainingDirectories;
